/* Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/> */
/* See COPYING for license details. */

#ifndef _CONVOLUTION_H_
#define _CONVOLUTION_H_

#include <math.h>
#include "common.h"

/**begin repeat
 * #type = double, float#
 */

/* 
 * Performs convolution of input with filter and downsamples by taking every
 * step-th element from the result.
 *
 * input    - input data
 * N        - input data length
 * filter   - filter data
 * F        - filter data length
 * output   - output data
 * step     - decimation step
 * mode     - signal extension mode
 */

/* memory efficient version */

int @type@_downsampling_convolution(const @type@* input, const_index_t N,
                                    const @type@* filter, const_index_t F,
                                    @type@* output, const_index_t step,
                                    MODE mode);

/* 
 * Straightforward implementation with memory reallocation - for very short
 * signals (shorter than filter).  This id called from downsampling_convolution
 */ 

int @type@_allocating_downsampling_convolution(const @type@* input,
                                               const_index_t N, const @type@*
                                               filter, const_index_t F,
                                               @type@* output, const_index_t
                                               step, MODE mode);


/*
 * Performs normal (full) convolution of "upsampled" input coeffs array with
 * filter Requires zero-filled output buffer (adds values instead of
 * overwriting - can be called many times with the same output).
 *
 * input    - input data
 * N        - input data length
 * filter   - filter data
 * F        - filter data length
 * output   - output data
 * O        - output lenght (currently not used)
 * mode     - signal extension mode
 */

int @type@_upsampling_convolution_full(const @type@* input, const_index_t N,
                                       const @type@* filter, const_index_t F,
                                       @type@* output, const_index_t O);

/* 
 * Performs valid convolution (signals must overlap)
 * Extends (virtually) input for MODE_PERIODIZATION.
 */

int @type@_upsampling_convolution_valid_sf(const @type@* input, const_index_t N,
                                           const @type@* filter,
                                           const_index_t F, @type@* output,
                                           const_index_t O, MODE mode);

/* 
 * TODO
 * for SWT
 * int upsampled_filter_convolution(const @type@* input, const int N,
 *                                  const @type@* filter, const int F,
 *                                  @type@* output, int step, int mode);
 */

/**end repeat**/

#endif
